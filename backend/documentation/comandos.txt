# Guia Completo ‚Äî Backend Node.js + MongoDB (Docker)

==========================================
1. Preparar a base de dados MongoDB
==========================================

1.1. Verifica o ficheiro `docker-compose.yml`
- O servi√ßo `mongo` deve ter as seguintes vari√°veis e portas:
  ```yaml
  mongo:
    image: mongo:latest
    container_name: mongo_db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=senhaadmin
      - MONGO_INITDB_DATABASE=auth_db
      - MONGO_INITDB_USERNAME=app_user
      - MONGO_INITDB_PASSWORD=app_password
    ports:
      - "27017:27017"
    networks:
      - dsa-network
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
  ```
- Estas credenciais ser√£o usadas para aceder √† base de dados.

1.2. Inicia os containers Docker
```sh
docker-compose up -d
```
- Isto vai iniciar o MongoDB e o backend.

1.3. Configura o ficheiro `.env`
- No diret√≥rio `backend`, cria ou edita o ficheiro `.env` com:
  ```
  MONGODB_URI_LOCAL=mongodb://app_user:app_password@localhost:27017/auth_db
  MONGODB_URI_DOCKER=mongodb://app_user:app_password@mongo:27017/auth_db
  USE_DOCKER=true
  ```
- Garante que usas exatamente as mesmas credenciais que est√£o no `docker-compose.yml`.

==========================================
2. Popular a base de dados com dados de teste
==========================================

2.1. Garante que o MongoDB est√° a correr
```sh
docker-compose up -d
docker ps
```
- Deves ver o container `mongo_db` ativo.

2.2. Corre o script de seed
```sh
cd backend/data
node seed.js
```
- Se tudo correr bem, deves ver:
  ```
  ‚ú® Base de dados MongoDB populada com sucesso!
  ```

2.3. Se aparecer erro `ECONNREFUSED`
- Verifica se a porta 27017 est√° exposta no `docker-compose.yml`.
- Confirma que o `.env` tem as credenciais certas.
- Reinicia os containers:
  ```sh
  docker-compose down
  docker-compose up -d
  ```

==========================================
3. Visualizar a base de dados no MongoDB Compass
==========================================

3.1. Instala o [MongoDB Compass](https://www.mongodb.com/try/download/compass)

3.2. Abre o Compass e liga-te com a seguinte string:
```
mongodb://app_user:app_password@localhost:27017/auth_db
```

3.3. V√™ a base de dados e cole√ß√µes
- Vais ver a base de dados `auth_db` e as cole√ß√µes criadas pelo seed (ex: `users`, `materials`).

==========================================
4. Verificar dados pelo terminal (opcional)
==========================================

4.1. Acede ao shell do MongoDB dentro do container:
```sh
docker exec -it mongo_db mongosh -u app_user -p app_password --authenticationDatabase auth_db
```

4.2. Comandos √∫teis:
```js
show dbs
use auth_db
show collections
db.users.find()
db.materials.find()
```

==========================================
5. Comandos para correr o backend
==========================================

5.1. Desenvolvimento (hot reload)
---------------------------------
Usa este modo para programar e testar rapidamente, com recarregamento autom√°tico ao alterar ficheiros.

Comando:
    docker-compose up backend-dev

O que faz:
- Inicia o backend em modo desenvolvimento, com hot reload (nodemon).
- Todas as altera√ß√µes ao c√≥digo s√£o aplicadas imediatamente.
- Liga-se ao MongoDB do Docker Compose (servi√ßo "mongo").
- Backend dispon√≠vel em http://localhost:4000

5.2. Produ√ß√£o (simula√ß√£o)
-------------------------
Usa este modo para testar como ser√° o ambiente real de produ√ß√£o (sem hot reload).

Comando:
    docker-compose up --build backend

O que faz:
- Faz build da imagem do backend e corre sem hot reload.
- Liga-se ao MongoDB do Docker Compose (servi√ßo "mongo").
- Backend dispon√≠vel em http://localhost:4000

5.3. Local (sem Docker)
-----------------------
Se quiseres correr o backend diretamente na tua m√°quina (apenas para testes r√°pidos):

Comando:
    npm run dev      # hot reload (nodemon)
    npm start        # modo normal

O que faz:
- Liga-se ao MongoDB local (localhost:27017), usando a vari√°vel MONGODB_URI_LOCAL.
- Backend dispon√≠vel em http://localhost:4000

==========================================
6. Diferen√ßas entre ambientes (dev vs prod)
==========================================

- As rotas e m√©todos HTTP (GET, POST, etc.) s√£o iguais em todos os ambientes.
- S√≥ o endere√ßo base muda:
    - Local: http://localhost:4000
    - Docker Compose (entre containers): http://backend:4000
- O backend liga-se ao MongoDB pelo nome do servi√ßo Docker (`mongo`) em Docker, e por `localhost` fora do Docker.

Exemplos de endpoints:
- GET http://localhost:4000/api/users
- POST http://localhost:4000/api/auth/register
- POST http://localhost:4000/api/auth/login

==========================================
7. Notas finais
==========================================

- Se mudares credenciais no `docker-compose.yml`, reinicia sempre os containers.
- O MongoDB s√≥ mostra a base de dados se j√° tiver documentos inseridos.
- Se precisares de limpar tudo, podes apagar o volume Docker:
  ```sh
  docker-compose down -v
  ```
- Consulta os logs do backend para ver a string de liga√ß√£o ao MongoDB.

==========================================

D√∫vidas? Pergunta ao Tomas! üòâ