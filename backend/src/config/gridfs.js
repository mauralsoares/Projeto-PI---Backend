// src/config/gridfs.js

// Importa o mongoose para aceder √† liga√ß√£o activa da base de dados
const mongoose = require('mongoose');
// Importa a biblioteca gridfs-stream, que permite gerir ficheiros em MongoDB
const Grid = require('gridfs-stream');

// Vari√°vel privada onde ser√° guardada a inst√¢ncia do GridFS
let gfs;

/**
 * ‚öôÔ∏è Fun√ß√£o de configura√ß√£o do GridFS
 * Esta fun√ß√£o inicia o sistema GridFS com base numa liga√ß√£o MongoDB previamente estabelecida.
 * O GridFS permite armazenar ficheiros de grandes dimens√µes (ex.: PDF, imagens, √°udio) directamente na base de dados,
 * distribuindo-os em blocos (chunks).
 * 
 * @param {mongoose.Connection} conn - Liga√ß√£o activa ao MongoDB, proveniente do mongoose.connection
 */
const connectGridFS = (db) => {
    // Verifica se j√° existe uma inst√¢ncia do GridFS
  Grid.mongo = mongoose.mongo;
  // Se j√° existir, n√£o faz nada
  gfs = Grid(db); // ‚Üê j√° √© o db diretamente
  gfs.collection('uploads');// Define a colec√ß√£o onde os ficheiros ser√£o armazenados
  console.log('üìÇ GridFS iniciado (colec√ß√£o "uploads")');
};


/**
 * üì§ Fun√ß√£o para obter a inst√¢ncia do GridFS j√° inicializada
 * Esta fun√ß√£o √© √∫til quando se necessita de aceder ao GridFS noutros m√≥dulos (ex.: controllers de upload/download).
 * 
 * @returns {Grid} A inst√¢ncia activa do GridFS
 */
const getGFS = () => gfs;

// Exporta ambas as fun√ß√µes para serem utilizadas noutros ficheiros
module.exports = {
  connectGridFS,
  getGFS
};
